#!/bin/sh
# pdns-mysql-slave-prune (part of ossobv/vcutil) // wdoekes/2017,2021
#   // Public Domain
#
# Reads PowerDNS MySQL backend SLAVE data for stale domains and prunes
# those.
#
# Usage:
#
#   # pdns-mysql-slave-prune
#   Pruning SLAVE domain 'old-removed-domain.tld' (704)
#   ...
#
# It works by checking your PowerDNS MySQL database backend for domains
# with:
# - type set to SLAVE
# - that haven't been 'last_check' updated in the last 3 days
#
# An extra check is performed before removal to confirm that the AVG of
# the last_check updates is at least two days ago. If the average is
# older, it aborts because the slaving might be broken.
#
#
# Tested with PowerDNS 4.0, but should work with PowerDNS 3.4 as well.
# Silence regular output by discarding stdout.
#

DBNAME=$(find /etc/powerdns/ -name '*.conf' -type f |
         xargs grep -h ^gmysql-dbname= | sed -e 's/[^=]*=//')

AVG_OLD_TIMESTAMP='(UNIX_TIMESTAMP() - 2 * 86400)'  # '-2 days'
OLD_TIMESTAMP='(UNIX_TIMESTAMP() - 3*86400)'        # '-3 days'

myquery() {
    mysql --defaults-file=/etc/mysql/debian.cnf "$DBNAME" -Ne "$1"
}

test_slave_running() {
    #return  # <-- DISABLE this check?
    if test "$(myquery "
            SELECT AVG(last_check) > $AVG_OLD_TIMESTAMP AS val
            FROM domains WHERE type = 'SLAVE';")" != "1"; then
        updated=$(myquery "
            SELECT name FROM domains WHERE last_check >= $AVG_OLD_TIMESTAMP
              AND type = 'SLAVE' ORDER BY name;")
        not_updated=$(myquery "
            SELECT name FROM domains WHERE last_check < $AVG_OLD_TIMESTAMP
              AND type = 'SLAVE' ORDER BY name;")
        if test -z "$updated"; then
            cat >&2 <<EOF
Slave updates are probably broken!
No domain appears to have been updated recently.

Stopping the pruning to avoid accidents..
EOF
        else
            updated_len=$(echo "$updated" | wc -l)
            not_updated_len=$(echo "$not_updated" | wc -l)
            # NOTE: Using tail instead of head in the sample, because we don't
            # want to see only PTR (in-addr.arpa.) ranges.
            cat >&2 <<EOF
Slave updates _might_ be broken.
$updated_len domains are updated, $not_updated_len are not.

Sample of updated domains:
- ...
$(echo "$updated" | sed -e 's/^/- /' | tail -n10)

Sample of not updated domains:
- ...
$(echo "$not_updated" | sed -e 's/^/- /' | tail -n10)

Perhaps you deleted a lot of domains -- more than half? (The not-updated ones.)
If so, you should disable this check temporarily, so the pruning can commence.

See the to-be-pruned candidates for yourself:

  SELECT name FROM domains WHERE last_check < $OLD_TIMESTAMP
    AND type = 'SLAVE' ORDER BY name;

Stopping for now..
EOF
        fi
        exit 1
    fi
}

old_slave_domains() {
    myquery "
        SELECT id, name FROM domains
        WHERE type = 'SLAVE' AND last_check < $OLD_TIMESTAMP
        ORDER BY name, id;"
}

prune_domain() {
    id=$1
    domain=$2
    if ! test "$((id-1))" -lt "$id"; then
        echo "Not an integer id for domain '$domain': $id" >&2
        exit 1
    fi

    echo "Pruning SLAVE domain '$domain' ($id)"
    myquery "
        DELETE FROM comments WHERE domain_id = $id;
        DELETE FROM cryptokeys WHERE domain_id = $id;
        DELETE FROM domainmetadata WHERE domain_id = $id;
        DELETE FROM records WHERE domain_id = $id;
        DELETE FROM domains WHERE id = $id;"
}

# Only prune data if most of the slaving works.
test_slave_running || exit 1

# Do some pruning.
old_slave_domains | awk -F'\t' '{print $1 ";" $2}' | while read line; do
    id=${line%;*}
    domain=${line#*;}
    prune_domain $id $domain
done

# vim: set ts=8 sw=4 sts=4 et ai:
