#!/bin/bash
# kubectl-sh-secret (part of ossobv/vcutil) // wdoekes/2019 // Public Domain
#
# Helper script to manage opaque secrets. Usage through kubectl wrapper.
#
# Example:
#
#   kubectl-sh-secret -n NAMESPACE get secrets SECRET KEY
#
# Or, the kubectl-wrapper wrapped version:
#
#   kubectl -n NAMESPACE get secrets SECRET --sh-secret KEY
#
# That last version will enable tab-completion to work as usual.
#
test -z "${BASH_VERSION}" && echo "$0: requires bash" >&2 && exit 1

# Reorder arguments:
options=$(getopt -o n: -- "$@") || exit 1
eval set -- "$options"
while true; do
    case "$1" in
    -n) shift; namespace="$1";;
    --) shift; break;;
    esac
    shift
done

# These arguments are needed for the kubectl-wrapper style to function:
arg_get="$1"    # get
arg_secret="$2" # secret[s]

# The actual arguments:
secret="$3"     # [SECRET]
key=$(echo "$4" | sed -e 's/[^A-Za-z0-9_.-]//')  # [KEY]
key_esc=$(echo "$key" | sed -e 's/[.]/[.]/g')  # escape allowed magic tokens
write="$5"      # [write]

if [[ $# -gt 5 ]] || [[ "$arg_get" != "get" ]] ||
        [[ "$arg_secret" != secret* ]] || (
        [[ -n "$write" ]] && [[ "$write" != write ]] ); then
    echo "Usage: $0 [-n NAMESPACE] get secret [SECRET [KEY [write]]]" >&2
    exit 1
fi

# List all secrets:
list_secrets() {
    kubectl_with_ns get secret
    exit $?
}

# List secret blob:
# > data:
# >   key1: base64value
# >   key2: base64value
# > kind: Secret
list_secret() {
    get_remote
    echo "$keydata" | while read -r line; do
        key1=${line%%: *}
        base64value=${line#*: }
        [[ -z "$key" ]] && echo "[ decoding $key1 ]" >&2
        echo "$base64value" | base64 -d
    done
    exit 0
}

# Update secret:
edit_secret() {
    get_remote
    get_local
    fulldata2=$(echo "$fulldata" |
                sed -e "s#  $key_esc: .*#  $key: $base64value#")
    if [[ "$fulldata" == "$fulldata2" ]]; then
        echo "No change?" >&2
        exit 1
    fi
    diff -pu <(echo "$fulldata") <(echo "$fulldata2")  # bashism
    yn=
    while true; do 
        echo >&2
        echo -n "Commit [y/n]? " >&2
        read yn < /dev/stdin
        if [[ "$yn" == y ]]; then
            break
        elif [[ "$yn" == n ]]; then
            echo >&2
            echo "Aborted" >&2
            exit 1
        fi
    done
    echo >&2
    echo "$fulldata2" | kubectl_with_ns apply -f - >&2
}

kubectl_with_ns() {
    if [[ -z "$namespace" ]]; then
        /usr/bin/kubectl "$@"
    else
        /usr/bin/kubectl -n "$namespace" "$@"
    fi
}

get_remote() {
    fulldata=$(kubectl_with_ns get secret -o yaml "$secret")
    keydata=$(echo "$fulldata" |
              sed -e '/^data:/,/kind: Secret/!d;/^data:/d;/^kind: Secret/d')
    if [[ -z "$keydata" ]] ||
          echo "$keydata" | grep -vE '^  [A-Za-z0-9_.-]+: ' | grep -q ''; then
        echo "Unexpected data:" >&2
        echo "\"$keydata\"" >&2
        exit 1
    fi
    if [[ -n "$key" ]]; then
        keydata=$(echo "$keydata" | grep "^  $key_esc: ")
        if [[ -z "$keydata" ]]; then
            echo "Key $key not found in secret $secret" >&2
            exit 1
        fi
    fi
}

get_local() {
    base64value=$(base64 -w0)
    if [[ -z "$base64value" ]]; then
        echo "No input data; aborting" >&2
        exit 1
    fi
}

if [[ -z "$secret" ]]; then
    list_secrets
elif [[ -z "$write" ]]; then
    list_secret
else
    edit_secret
fi
