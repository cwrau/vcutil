#!/bin/sh
# make-master-secret-log (part of ossobv/vcutil) // wdoekes/2022 //
#   Public Domain
#
# Makes a "(pre)-master-secret log" file, readable by Wireshark.
#
# If you want Wireshark to decrypt TLS traffic, you need to record the
# TLS secrets when they are used. This script documents how to do so for
# haproxy and simplifies creating a valid keylog file.
#
# Usage:
#
#   cat webserver.log | make-master-secret-log -u
#
# Input is fed through stdin, and should contain key value pairs with
# TLS or TLSv1.3 secrets, like SI=<sessionid> and SK=<sessionkey>.
#
# Output looks like this for TLS:
#
#   RSA Session-ID:<session_id> Master-Key:<session_key>
#
# Output looks like this for TLSv1.3:
#
#   CLIENT_HANDSHAKE_TRAFFIC_SECRET <clientrandom> <client_secret>
#   SERVER_HANDSHAKE_TRAFFIC_SECRET <clientrandom> <server_secret>
#   CLIENT_TRAFFIC_SECRET_0 <client_random> <client_secret_0>
#   SERVER_TRAFFIC_SECRET_0 <client_random> <server_secret_0>
#   EXPORTER_SECRET <client_random> <exporter_secret>
#
# Expected log format:
#
#   ... TLSK=+ SI=<sessionid> SK=<sessionkey> ... CHTS=<client_secret> ...
#
# Expected invocation:
#
#   cat webserver.log | sed -ne 's/.* TLSK=+ \(.*\)/\1/p' | sort -u |
#     make-master-secret-log | uniq
#
# Alternative invocation (shorthand for above):
#
#   cat webserver.log | make-master-secret-log -u
#
# See also:
# - https://firefox-source-docs.mozilla.org/security/nss/legacy/key_log_format/
# - https://wiki.wireshark.org/TLS#using-the-pre-master-secret
# - https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#
#     3.2-tune.ssl.keylog
#
#
# LOG FORMAT
# ----------
#
# It expects the following variable to be set as a simple sentinel (this
# is only to avoid dupes). On the right side we show the haproxy config.
#
# NOTE! For haproxy, you need 'tune.ssl.keylog on' in the global section.
#
#   TLSK=+                      TLSK=+
#
# It expects these to be set for TLS (with haproxy log format):
#
#   SI=<session_id>             SI=%[ssl_fc_session_id,hex]
#   SK=<session_key>            SK=%[ssl_fc_session_key,hex]
#
# And one or more of the following for TLSv1.3 (some appear optional):
#
#   CR=<client_random>          CR=%[ssl_fc_client_random,hex]
#   CETS=<client_early>  (opt.) CETS=%[ssl_fc_client_early_traffic_secret]
#   CHTS=<client_secret>        CHTS=%[ssl_fc_client_handshake_traffic_secret]
#   SHTS=<server_secret>        SHTS=%[ssl_fc_server_handshake_traffic_secret]
#   CTS0=<client_server_0>      CTS0=%[ssl_fc_client_traffic_secret_0]
#   STS0=                       STS0=%[ssl_fc_server_traffic_secret_0]
#   ES=                         ES=%[ssl_fc_exporter_secret]
#   EES=                 (opt.) EES=%[ssl_fc_early_exporter_secret]
#
#
# HAPROXY LOG FORMAT
# ------------------
#
# haproxy.cfg:
#
#   global
#     log global
#     tune.ssl.keylog on
#
#   frontend https-in
#     # If you use template unit files, for haproxy@, you'll also want this:
#     # [Service]
#     # SyslogIdentifier=haproxy@%i
#     log stdout format short daemon info
#     # The log format (make sure the '...' gets other info as well).
#     log-format %ci:%cp\ ... TLSK=+\ SI=%[ssl_fc_session_id,hex]\
#       SK=%[ssl_fc_session_key,hex]\ CR=%[ssl_fc_client_random,hex]\
#       CETS=%[ssl_fc_client_early_traffic_secret]\
#       CHTS=%[ssl_fc_client_handshake_traffic_secret]\
#       SHTS=%[ssl_fc_server_handshake_traffic_secret]\
#       CTS0=%[ssl_fc_client_traffic_secret_0]\
#       STS0=%[ssl_fc_server_traffic_secret_0]\
#       ES=%[ssl_fc_exporter_secret]\ EES=%[ssl_fc_early_exporter_secret]
#
#
# EXAMPLES
# -------------
EXAMPLE_INPUT="\
mei 25 22:35:35 load-balancer-1 haproxy@...[25399]: 1.2.3.4:42734 \
[25/May/2022:22:35:35.542] https-in~ bk_k8s/node2.zl-ingress-http \
32/0/1/1/34 403 279 - - ---- 248/248/1/0/0 0/0 {curl/7.68.0} \
\"POST /webservice HTTP/1.1\" \
TLSK=+ SI=C69A SK=8032 CR=- CETS=- CHTS=- SHTS=- CTS0=- STS0=- ES=- EES=-
mei 25 22:35:36 load-balancer-1 haproxy@...[25399]: 5.5.5.5:42735 \
[25/May/2022:22:35:36.542] https-in~ bk_k8s/node2.zl-ingress-http \
32/0/1/1/34 403 279 - - ---- 248/248/1/0/0 0/0 {curl/7.69.0} \
\"POST /webservice HTTP/1.1\" \
TLSK=+ SI=- SK=- CR=36A2 CETS=- CHTS=0f SHTS=5d CTS0=45 STS0=1e ES=db EES=-"
EXAMPLE_OUTPUT="\
RSA Session-ID:C69A Master-Key:8032
CLIENT_HANDSHAKE_TRAFFIC_SECRET 36A2 0f
SERVER_HANDSHAKE_TRAFFIC_SECRET 36A2 5d
CLIENT_TRAFFIC_SECRET_0 36A2 45
SERVER_TRAFFIC_SECRET_0 36A2 1e
EXPORTER_SECRET 36A2 db"

set -eu

if test $# -eq 1 && test "$1" = "-u"; then
    test -t 0 && echo "(expecting input on stdin; ^D when done)" >&2 || true
    # NOTE: This still causes dupes for TLS ("RSA") when SESSION_ID and
    # SESSION_KEY are the same, but CLIENT_RANDOM is different.
    # Therefore a uniq at the end.
    sed -ne 's/.*TLSK=+ \(.*\)/\1/p' | sort -u | "$0" | uniq
    exit $?
elif test $# -ge 1; then
    echo "Usage: cat webserver.log | $0 -u" >&2
    echo >&2
    echo "Example input:" >&2
    echo >&2
    echo "$EXAMPLE_INPUT" | sed -e 's/^/  /'
    echo >&2
    echo "Example output:" >&2
    echo >&2
    CREATED_OUTPUT=$(printf '%s\n' "$EXAMPLE_INPUT" | "$0")
    echo "$CREATED_OUTPUT" | sed -e 's/^/  /' >&2
    echo >&2
    if test "$CREATED_OUTPUT" != "$EXAMPLE_OUTPUT"; then
        echo "ERROR: self-test failed" >&2
        exit 2
    fi
    exit 1
fi


while read -r line; do
    SESSION_ID=
    SESSION_KEY=
    #
    CLIENT_RANDOM=
    #
    CLIENT_HANDSHAKE_TRAFFIC_SECRET=
    SERVER_HANDSHAKE_TRAFFIC_SECRET=
    CLIENT_TRAFFIC_SECRET_0=
    SERVER_TRAFFIC_SECRET_0=
    EXPORTER_SECRET=
    #
    CLIENT_EARLY_TRAFFIC_SECRET=
    EARLY_EXPORTER_SECRET=

    for arg in $line; do
        if test "${arg#*=}" != "$arg"; then
            key=${arg%%=*}
            value=${arg#*=}
            if test -n "$value" && test "$value" != "-"; then
                case $key in
                # TLSv1.3:
                CR) CLIENT_RANDOM=$value;;
                CETS) CLIENT_EARLY_TRAFFIC_SECRET=$value;;
                CHTS) CLIENT_HANDSHAKE_TRAFFIC_SECRET=$value;;
                SHTS) SERVER_HANDSHAKE_TRAFFIC_SECRET=$value;;
                CTS0) CLIENT_TRAFFIC_SECRET_0=$value;;
                STS0) SERVER_TRAFFIC_SECRET_0=$value;;
                ES) EXPORTER_SECRET=$value;;
                EES) EARLY_EXPORTER_SECRET=$value;;
                # Older TLS:
                SI) SESSION_ID=$value;;
                SK) SESSION_KEY=$value;;
                esac
            fi
        fi
    done

    if test -n "$SESSION_ID"; then
        echo "RSA Session-ID:$SESSION_ID Master-Key:$SESSION_KEY"
    fi

    if test -n "$CLIENT_RANDOM"; then
        for key in \
                CLIENT_HANDSHAKE_TRAFFIC_SECRET \
                SERVER_HANDSHAKE_TRAFFIC_SECRET \
                CLIENT_TRAFFIC_SECRET_0 SERVER_TRAFFIC_SECRET_0 \
                EXPORTER_SECRET \
                CLIENT_EARLY_TRAFFIC_SECRET EARLY_EXPORTER_SECRET; do
            eval value='$'${key}
            if test -n "$value"; then
                echo "$key $CLIENT_RANDOM $value"
            fi
        done
    fi
done
