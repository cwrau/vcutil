#!/bin/sh
# keystone-swift-curl (part of ossobv/vcutil) // wdoekes/2022 // Public Domain
#
# Helper shell script to do simple GET/PUT/HEAD/DELETE in OpenStack Swift
# after performing Keystone authentication.
#
# Dependencies: curl (for http requests), jq (to extract project url)
#
# To use this, you make a configuration file:
#
#   SWIFT_KEYSTONE_URL=https://keystone.example.com/v3
#   SWIFT_AUTH_USER=username@domainname
#   SWIFT_AUTH_PASSWORD=password
#   SWIFT_PROJECT=projectname@domainname
#   #SWIFT_PROJECT_URL=https://swift.example.com/projecturl
#   SWIFT_CONTAINER=container
#
# Pass the configuration file as arg1, then method, then the remote file.
#
#   $ keystone-swift-curl path/to/config PUT remote/file/path \
#       -H 'Content-Type: application/octet-stream' < data
#   $ keystone-swift-curl path/to/config HEAD remote/file/path
#   $ keystone-swift-curl path/to/config GET remote/file/path > data
#   $ keystone-swift-curl path/to/config DELETE remote/file/path
#
# Or, alternatively, load this into your script:
#
#   SWIFT_KEYSTONE_URL=https://keystone.example.com/v3
#   # and the other variables..
#   . /usr/bin/keystone-swift-curl  # source this script as a library
#   swift_init                      # make sure you init
#   swift_login                     # log in / fetch token
#   if ! swift_head path/to/file 2>/dev/null; then
#       echo data | swift_put path/to/file \
#         -H 'Content-Type: application/octet-stream'
#   fi
#
# Put QUIET=1 in the environment to silence any up/down progress.
#

swift_init() {
    # Check variables before starting. Works if 'set -u' is called.
    local var
    for var in $SWIFT_KEYSTONE_URL $SWIFT_AUTH_USER $SWIFT_AUTH_PASSWORD \
            $SWIFT_PROJECT $SWIFT_CONTAINER; do
        true
    done

    # NOTE: We use a temp directory to store credentials. This is safer
    # than passing these credentials on the command line, as they can be
    # seen in 'ps' output. (We do pass credentials in a printf call, but
    # because that is a shell builtin, no process is spawned for it.)
    SWIFT_RUNDIR=$(mktemp -d)
    trap 'rm -rf "$SWIFT_RUNDIR"' EXIT
}

swift_login() {
    local user_domain user project_domain project password
    user=${SWIFT_AUTH_USER%@*}; user_domain=${SWIFT_AUTH_USER#*@}
    project=${SWIFT_PROJECT%@*}; project_domain=${SWIFT_PROJECT#*@}
    password=$SWIFT_AUTH_PASSWORD

    echo "\
    {\"auth\": {\"identity\": {
      \"methods\": [\"password\"],
      \"password\": {\"user\": {
        \"name\": \"$user\",
        \"domain\": {\"name\": \"$user_domain\"},
        \"project\": {\"name\": \"$project\", \"domain\": {
          \"name\": \"$project_domain\"}},
        \"password\": \"$password\"}}}}}" >"$SWIFT_RUNDIR/login"

    local output
    output=$(curl -fsS --max-time 4 --include \
        -H "Content-Type: application/json" \
        --data @"$SWIFT_RUNDIR/login" "$SWIFT_KEYSTONE_URL/auth/tokens")

    printf '%s\n' "$output" |
        sed -ne 's/^x-subject-token:[[:blank:]]*/X-Auth-Token: /ip' \
          >"$SWIFT_RUNDIR/x-auth-token"
    if test -z "${SWIFT_PROJECT_URL:-}"; then
        output=$(printf '%s\n' "$output" | sed -e '1,/^[[:cntrl:]]*$/d')
        if command -v jq >/dev/null; then
            SWIFT_PROJECT_URL=$(\
                printf '%s\n' "$output" | jq -r '
                  .token.catalog[] |
                  select(.type=="object-store").endpoints[] |
                  select(.interface=="public").url')
        else
            echo 'SWIFT_PROJECT_URL not set but jq(1) not found' >&2
            echo 'You can extract it from this manually:' >&2
            if command -v json_pp >/dev/null; then
                printf '%s\n' "$output" | json_pp >&2
            else
                printf '%s\n' "$output" >&2
            fi
            echo 'Look for the "url" of an "endpoint" in' >&2
            echo 'an "object-store" catalog' >&2
            exit 1
        fi
    fi
}

swift_do() {
    local project_url="$SWIFT_PROJECT_URL"
    local container="$SWIFT_CONTAINER"
    local meth="$1"  # GET|DELETE|HEAD|PUT
    local file="$2"  # remote/path/to/file
    shift; shift
    if test "$meth" = PUT && test "${QUIET:-0}" = 0; then
        # To get a progress bar, we must redirect stdout to /dev/null. cURL
        # feature..
        echo -n "$file " >&2
        curl --progress-bar -fX "$meth" -H @"$SWIFT_RUNDIR/x-auth-token" \
            "$project_url/$container/$file" "$@" >/dev/null
    else
        curl -fsSX "$meth" -H @"$SWIFT_RUNDIR/x-auth-token" \
            "$project_url/$container/$file" "$@"
    fi
}

swift_delete() { swift_do DELETE "$@"; }
swift_get() { swift_do GET "$@"; }
swift_head() {
    # BEWARE: The etag holds the md5sum of the file, except when the file is
    # re-assembled from a large object (DLO).
    echo "$1"
    swift_do HEAD "$@" -v -H 'Connection: close' 2>&1 |
        sed -e '/^</!d;s/</ /'
}
swift_put() {
    if test -t 0; then
        echo "$0: Upload source is stdin. Did you forget to supply a file?" >&2
        exit 1
    fi
    local file="$1"; shift
    local size
    local divide=false
    if test -f /proc/self/fd/0; then
        # Real file? Get size?
        size=$(stat -Lc%s /proc/self/fd/0)
        if test $size -gt $((4096 * 1024 * 1024)); then
            divide=true
        else
            divide=false
        fi
    fi
    if $divide; then
        # Dynamic Large Objects
        # https://docs.openstack.org/swift/latest/overview_large_objects.html
        local n=0
        local mb=$((1024 * 1024))
        local chunk_mbs=1024
        local chunk_last=$(( (size - 1) / $mb ))
        local chunks=$(seq 0 $chunk_mbs $chunk_last | wc -l)
        if test "${QUIET:-0}" = 0; then
            echo "$file -- uploading $chunks x 1GB chunks" >&2
        fi
        for chunk_off in $(seq 0 $chunk_mbs $chunk_last); do
            n=$((n + 1))
            dd if=/proc/self/fd/0 bs=$mb skip=$chunk_off count=$chunk_mbs \
                status=none | swift_do PUT "$file/$(printf %08d $n)" \
                    --data-binary @- "$@"
        done
        swift_do PUT "$file" -H "X-Object-Manifest: $SWIFT_CONTAINER/$file" \
            --data-binary ''
    else
        swift_do PUT "$file" --data-binary @- "$@"
    fi
}


if test "${0##*/}" = 'keystone-swift-curl'; then
    # We're the main script; we're not sourced by someone else.
    case ${1:---help} in
    -h|--help) echo "$0: usage: See $0 source" >&2; exit 1
    esac

    set -eu
    if test "${1#/}" = "$1"; then
        . "./$1"; shift # source the config file ($1, must contain slash)
    else
        . "$1"; shift   # source the config file ($1)
    fi
    swift_init          # initialize temp dir
    swift_login         # get token
    method=$1; shift    # get method ($2)
    case $method in
    DELETE) swift_delete "$@";;
    GET) swift_get "$@";;
    HEAD) swift_head "$@";;
    PUT) swift_put "$@";;
    *) echo "unknown method: $method" >&2; exit 1
    esac
fi
