commit 2ddef2d7ab1c074f6e044fcdbc62a1fcdbaca310
Author: Walter Doekes <walter+github@wjd.nu>
Date:   Fri Mar 22 09:50:20 2019 +0100

    interfaces2netplan: Better exception handling

diff --git a/interfaces2netplan b/interfaces2netplan
index 2694bab..e0dba9f 100755
--- a/interfaces2netplan
+++ b/interfaces2netplan
@@ -1,5 +1,6 @@
 #!/usr/bin/env python
-# interfaces2netplan (part of ossobv/vcutil) // wdoekes/2018 // Public Domain
+# interfaces2netplan (part of ossobv/vcutil) // wdoekes/2018-2019
+#   // Public Domain
 #
 # Quick attempt to convert the simplest interfaces files (from ifupdown)
 # to netplan.io YAML syntax. If it has the slightest hint that it might miss
@@ -41,6 +42,10 @@ class Line(object):
         self.lineno = lineno
         self.filename = filename
 
+    @property
+    def location(self):
+        return '{}:{}'.format(self.filename, self.lineno)
+
 
 def _netmaskbits(netmask):
     mask = [int(i) for i in netmask.split('.')]
@@ -220,6 +225,7 @@ class InterfacesParser(object):
             # Collapse multiple blanks into one everywhere.
             line = space_re.sub(' ', line)
 
+            # Store sanitized line.
             lineobj.line = line
             newdata.append(lineobj)
 
@@ -230,42 +236,23 @@ class InterfacesParser(object):
         autos = set()
         config = {}
 
-        for lineobj in self._data:
-            line = lineobj.line
-            if line.startswith('auto '):
-                values = line.split()  # auto lo eth0 eth1
-                for value in values[1:]:
-                    autos.add(value)
-
-            elif line.startswith('iface '):
-                values = line.split()  # iface eth0 inet{,6} static|...
-                context = (values[1], values[2])  # (lo|eth0, inet|inet6)
-                if context in config:
-                    raise ValueError('dupe {!r} context? {!r} [{}:{}]'.format(
-                        context, line, lineobj.filename, lineobj.lineno))
-                assert ':' not in values[1], line  # not eth0:0 aliases
-                assert values[2] in ('inet', 'inet6'), line
-                type_ = values[3]  # auto|static|dhcp|loopback
-                if context == ('lo', 'inet'):
-                    assert type_ == 'loopback', line
-                    config[context] = {}
-                elif type_ in 'static':
-                    config[context] = {}
-                elif type_ == 'dhcp' and values[2] == 'inet':
-                    config[context] = {'dhcp4': 'yes'}
-                elif type_ == 'auto' and values[2] == 'inet6':
-                    config[context] = {'dhcp6': 'yes'}
+        try:
+            for lineobj in self._data:
+                if lineobj.line.startswith('auto '):
+                    values = lineobj.line.split()  # auto lo eth0 eth1
+                    for value in values[1:]:
+                        autos.add(value)
+                    context = None
+                elif lineobj.line.startswith('iface '):
+                    context = self._parse_iface(config, lineobj)
+                elif context is not None and lineobj.line.startswith(' '):
+                    self._parse_context(context, config[context], lineobj)
                 else:
-                    raise ValueError(
-                        'unexpected {!r} type? {!r} [{}:{}]'.format(
-                            type_, line, lineobj.filename, lineobj.lineno))
-
-            elif line.startswith(' '):
-                self._parse_context(context[1], config[context], lineobj)
-
-            else:
-                raise ValueError('unexpected line {!r} [{}:{}]'.format(
-                    line, lineobj.filename, lineobj.lineno))
+                    raise ValueError('unexpected/unimplemented')
+        except Exception as e:  # assert/index/type/value
+            raise ValueError('{}: parse fail at {!r}: {}'.format(
+                lineobj.location, lineobj.line, ': '.join(
+                    str(i) for i in e.args)))
 
         config_keys = set([i[0] for i in config.keys()])
         if config_keys != autos:
@@ -275,43 +262,71 @@ class InterfacesParser(object):
 
         self._parsed = config
 
-    def _parse_context(self, proto, config, lineobj):
-        line = lineobj.line
-        cols = line.split()
+    def _parse_iface(self, config, lineobj):
+        values = lineobj.line.split()  # iface eth0 inet{,6} static|...
+        context = (values[1], values[2])  # (lo|eth0, inet|inet6)
+        if context in config:
+            raise ValueError('duplicate interface+protocol {!r}+{!r}'.format(
+                context[0], context[1]))
+
+        assert ':' not in values[1], 'iface:alias not available in netplan'
+        assert values[2] in ('inet', 'inet6'), 'expected inet or inet6'
+        type_ = values[3]  # auto|static|dhcp|loopback
+
+        if context == ('lo', 'inet'):
+            assert type_ == 'loopback', lineobj.line
+            config[context] = {}
+        elif type_ in 'static':
+            config[context] = {}
+        elif type_ == 'dhcp' and values[2] == 'inet':
+            config[context] = {'dhcp4': 'yes'}
+        elif type_ == 'auto' and values[2] == 'inet6':
+            config[context] = {'dhcp6': 'yes'}
+        else:
+            raise ValueError('unexpected interface+protocol+type')
+
+        return context
+
+    def _parse_context(self, context, config, lineobj):
+        cols = lineobj.line.split()
         cmd = cols.pop(0)
         if cmd == 'address':
             assert 'addresses' not in config, config
-            assert len(cols) == 1, line
+            assert len(cols) == 1, 'expected 1 argument to address'
             config['addresses'] = [cols[0]]
         elif cmd == 'netmask':
             assert 'addresses' in config, config
             assert '/' not in config['addresses'][0], config
-            assert len(cols) == 1, line
+            assert len(cols) == 1,  'expected 1 argument to netmask'
             bits = _netmaskbits(cols[0])
             config['addresses'][0] += '/{}'.format(bits)
-        elif cmd == 'gateway' and proto == 'inet':
+        elif cmd == 'gateway' and context[1] == 'inet':
             assert 'gateway4' not in config, config
-            assert len(cols) == 1, line
+            assert len(cols) == 1, 'expected 1 argument to gateway'
             config['gateway4'] = cols[0]
-        elif cmd == 'gateway' and proto == 'inet6':
+        elif cmd == 'gateway' and context[1] == 'inet6':
             assert 'gateway6' not in config, config
-            assert len(cols) == 1, line
+            assert len(cols) == 1, 'expected 1 argument to gateway'
             config['gateway6'] = cols[0]
+        elif cmd in ('network', 'broadcast'):
+            _stderr(
+                '{}: Ignoring {!r} of {} ({}). '
+                'Your netmask is valid, right?\n'.format(
+                    lineobj.location, cmd, context[0], context[1]))
         elif cmd == 'dns-nameservers':
             if 'nameservers' not in config:
                 config['nameservers'] = {}
             assert 'addresses' not in config['nameservers'], config
-            assert cols, line
+            assert cols, 'expected one or more dns-nameservers arguments'
             config['nameservers']['addresses'] = cols
         elif cmd == 'dns-search':
             if 'nameservers' not in config:
                 config['nameservers'] = {}
             assert 'search' not in config['nameservers'], config
-            assert cols, line
+            assert cols, 'expected one or more dns-search arguments'
             config['nameservers']['search'] = cols
         else:
-            raise ValueError('unexpected line {!r} [{}:{}]'.format(
-                line, lineobj.filename, lineobj.lineno))
+            raise ValueError('cmd {!r} unknown/unimplemented'.format(cmd))
 
     def _join_inet_inet6(self):
         ethernets = {}
