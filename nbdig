#!/usr/bin/env python3
# nbdig (part of ossobv/vcutil) // wdoekes/2024 // Public Domain
#
# Quickly query the netbox server for hosts and hostnames/IPs, using the
# Netbox REST API.
#
# Usage examples:
#
#     $ nbdig walter  # or 'w?lter.*'
#     walter.example.com              123.123.123.123
#     walter.internal.lan             10.32.1.5
#
#     $ nbdig walter.internal.lan
#     10.32.1.5
#
#     $ nbdig -x 10.32.1.5
#     walter.internal.lan
#
# Configure by setting up a ~/.config/nbdig.ini with one section:
#
#     [netbox.example.com]
#     api_url = https://netbox.example.com/api
#     api_token = 0123456789abcdef0123456789abcdef01234567
#
from argparse import ArgumentParser
from collections import namedtuple
from configparser import ConfigParser, MissingSectionHeaderError
from fnmatch import translate as glob_to_re
from ipaddress import IPv4Address
from json import dumps
from os import path
from re import IGNORECASE, compile as re_compile, split as re_split
from sys import stderr
from warnings import warn

import requests
import warnings


INI_DEFAULT = '~/.config/nbdig.ini'


def net2ip(s):
    "'1.2.3.4/31' -> IPv4Address('1.2.3.4')"
    return IPv4Address(s.rsplit('/', 1)[0])


class StartupError(ValueError):
    pass


class Config(namedtuple('Config', 'api_url api_token')):
    @classmethod
    def from_defaults(cls):
        return cls.from_ini(path.expanduser(INI_DEFAULT))

    @classmethod
    def from_ini(cls, filename):
        ini = ConfigParser(
            delimiters=('=',), allow_no_value=True,
            inline_comment_prefixes=('#', ';'))
        try:
            ini.read(filename)
        except MissingSectionHeaderError as e:
            raise StartupError(f'{e} in in {filename}') from e
        assert len(ini.sections()) == 1, ini.sections()
        the_section = ini.sections()[0]
        data = dict(ini.items(the_section))
        try:
            # api_url, with "/api": "https://netbox.example.com/api"
            return cls(api_url=data['api_url'], api_token=data['api_token'])
        except KeyError as e:
            raise StartupError(
                f'api_url or api_token not found in {filename}') from e


class IpAddress(namedtuple('IpAddress', 'address iface vrf')):
    pass


class Host(namedtuple('Host', 'name ip_addresses extra')):
    pass


class ThinNetboxWrapper:
    NB_DEVS = '/dcim/devices/'
    NB_VMS = '/virtualization/virtual-machines/'

    def __init__(self, config):
        self._config = config

    def _get_query(self, path, filters):
        url = f'{self._config.api_url}{path}'
        headers = {'Authorization': f'Token {self._config.api_token}'}
        resp = requests.get(url, params=filters, headers=headers)
        resp.raise_for_status()
        return resp

    def find_hostname(self, hostfragment, load_properties):
        if '*' in hostfragment or '?' in hostfragment:
            params = [
                ('name__ic', part)
                for part in re_split('[*?]+', hostfragment) if part]
            # Alas. Multilpe name-searches will do an OR search. Take the
            # largest string and hope it's the most narrow match.
            params.sort(key=(lambda x: (-len(x[1]), x[1])))
            params = params[0:1]
            # Turn into a regex.
            re_match = re_compile(glob_to_re(hostfragment), IGNORECASE)
        else:
            params = [('name__isw', hostfragment)]  # startswith!
            # Turn into a regex. Make it a startswith match for now.
            re_match = re_compile(glob_to_re(hostfragment + '*'), IGNORECASE)

        show_properties = []
        load_properties = load_properties or ()

        for prop in load_properties:
            if '=' in prop:
                prop_lookup, prop_value = prop.split('=', 1)
                if prop_value and prop_value[0] not in (
                        'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
                        'abcdefghijklmnopqrstuvwxyz'
                        '0123456789_'):
                    if prop_value[0] == '^':
                        params.append((f'{prop_lookup}__isw', prop_value[1:]))
                    else:
                        raise NotImplementedError('unknown =-modifier')
                else:
                    # Do not use '{prop_lookup}__ie' here: it will break
                    # fancy value lookup, like status=offline, where
                    # status is a dict.
                    params.append((prop_lookup, prop_value))
            else:
                prop_lookup = prop

            if prop_lookup not in show_properties:
                show_properties.append(prop_lookup)

        # We'll need to get all the info in a second run. For large resultsets
        # we want to trim them by globbing name first.
        params.extend([('brief', 1), ('limit', 1000)])

        # Get device/VM ids.
        dev_ids, dev_ids_x = self._search_for_ids(
            self.NB_DEVS, params, hostfragment, re_match)
        vm_ids, vm_ids_x = self._search_for_ids(
            self.NB_VMS, params, hostfragment, re_match)

        # Are there any exact matches?
        if dev_ids_x or vm_ids_x:
            # Then take only exact matches.
            dev_ids = dev_ids_x
            vm_ids = vm_ids_x

        # Collect full info on the selected hosts.
        hosts = []
        for pth, ids in ((self.NB_DEVS, dev_ids), (self.NB_VMS, vm_ids)):
            if ids:
                params = [('id', id_) for id_ in ids]
                params.extend([('limit', 1000), ('exclude', 'config_context')])
                ret = self._get_query(pth, params)
                pages = ret.json()
                assert pages['next'] is None, NotImplemented  # pagination
                for dev_or_vm in pages['results']:
                    hosts.append(self._nb_device_or_vm_to_host(
                        dev_or_vm, show_properties=show_properties))

        # Sort, and cope with Nones.
        hosts.sort(key=(lambda x: (x.name or '')))

        return hosts

    def _nb_device_or_vm_to_host(self, info, show_properties):
        name = info['name']
        primary_ip = info['primary_ip']
        ip_addresses = []

        if primary_ip is not None:
            # TODO: get _all_ IPs from primary_ip['url']
            ip_addresses.append(IpAddress(
                address=IPv4Address(net2ip(primary_ip['address'])),
                iface='?', vrf='?'))
        else:
            warn(f'{name}: no primary IP set')

        def kv(k, v):
            return '{}={}'.format(k, v or '')

        extra = ' '.join(kv(k, v) for k, v in self._nb_extract_properties(
            info, show_properties))

        return Host(name=name, ip_addresses=ip_addresses, extra=extra)

    def _nb_extract_properties(self, info, show_properties):
        props = []
        for prop in show_properties:
            if prop.startswith('cf_'):
                prop_lookup = prop[3:]
                dict_ = info['custom_fields']
            else:
                prop_lookup = prop
                dict_ = info

            if prop_lookup in dict_:
                # Some properties are a dictionary. Take the "machine" value.
                if isinstance(dict_[prop_lookup], dict) and (
                        'value' in dict_[prop_lookup]):
                    props.append((prop, dict_[prop_lookup]['value']))
                elif isinstance(dict_[prop_lookup], list) and any(
                        'slug' in v for v in dict_[prop_lookup]):
                    props.append((prop, '+'.join(
                        v['slug'] for v in dict_[prop_lookup])))
                else:
                    props.append((prop, dict_[prop_lookup]))
            else:
                # FIXME: This warning might go off for properties that
                # exist on devices but not on VMs; e.g. for 'rear_port_count'.
                others = [k for k in info.keys() if k != 'custom_fields'] + [
                    f'cf_{k}' for k in info['custom_fields']]
                others = ', '.join(others)
                warn(f'property {prop!r} not found. maybe: {others}')

        return props

    def _search_for_ids(self, path, filters, exact_match, regex_match):
        exact_match = exact_match.lower()

        ret = self._get_query(path, filters)
        pages = ret.json()
        assert pages['next'] is None, NotImplemented  # pagination
        ids_exact = [
            res['id'] for res in pages['results']
            if (res.get('name') or '').lower() == exact_match]
        ids = [
            res['id'] for res in pages['results']
            if regex_match.match(res.get('name') or '')]

        return ids, ids_exact

    def find_ip_address(self, ip_address):
        params = [('address', ip_address), ('exclude', 'config_context')]
        ret = self._get_query('/ipam/ip-addresses/', params)
        pages = ret.json()
        assert pages['next'] is None, NotImplemented  # pagination
        try:
            return self._find_ip_address(pages)
        except KeyError as e:
            print(f'error: {e}', file=stderr)
            print('input: {}'.format(dumps(pages)), file=stderr)
            raise

    def _find_ip_address(self, pages):
        results = pages['results']
        assigned = []
        for address in results:
            # Discard network bits for now
            ip_address = net2ip(address['address'])
            vrf = address['vrf']['rd']
            assignment = address['assigned_object']
            iface = assignment['name']
            if 'virtual_machine' in assignment:
                name = assignment['virtual_machine']['name']
                host = Host(name=name, ip_addresses=[
                    IpAddress(address=ip_address, iface=iface, vrf=vrf)],
                    extra='')
                assigned.append(host)
            elif 'device' in assignment:
                name = assignment['device']['name']
                host = Host(name=name, ip_addresses=[
                    IpAddress(address=ip_address, iface=iface, vrf=vrf)],
                    extra='')  # extra NotImplemented
                assigned.append(host)
            else:
                raise NotImplementedError(assignment)

        if pages['count'] != len(assigned):
            raise ValueError('unhandled count: {}, got {}'.format(
                pages, assigned))

        return assigned


def do_forward_lookup(nb, hostfragment, load_properties, verbose=False):
    hosts = nb.find_hostname(hostfragment, load_properties)
    if not hosts:
        print('not found', file=stderr)
        return

    if not (len(hosts) == 1 and (
            # exact match?
            hostfragment == hosts[0].name or
            # intentional * for exact match?
            '*' in hostfragment or '?' in hostfragment)):
        verbose = True

    if verbose:
        for host in hosts:
            name = host.name or '<null>'
            addr = ' '.join(str(ip.address) for ip in host.ip_addresses)
            extra = host.extra
            print(f'{name!s:30}  {addr!s:15}  {extra}'.rstrip())
        return

    ip_addresses = [str(ip.address) for ip in hosts[0].ip_addresses]
    print('\n'.join(ip_addresses))


def do_reverse_lookup(nb, ip, verbose=False):
    hosts = nb.find_ip_address(ip)
    if not hosts:
        print('not found', file=stderr)
        return

    all_hostnames = set(h.name for h in hosts)
    if len(all_hostnames) != 1:
        verbose = True

    if verbose:
        for host in hosts:
            print(host)
        return

    print(''.join(all_hostnames))


def formatwarning(message, category, filename, lineno, line=None):
    """
    Override default Warning layout, from:

        /usr/bin/nbdig:174: UserWarning: DD6-B FREE: no primary IP set
            warn(f'{name}: no primary IP set')

    To:

        nbdig:175: UserWarning: DD6-B FREE: no primary IP set
    """
    if stderr.isatty():
        a, b = '\x1b[31;1m', '\x1b[0m'
    return '{a}{basename}:{lineno}: {category}: {message}{b}\n'.format(
        a=a, b=b, basename=path.basename(filename), lineno=lineno,
        category=category.__name__, message=message)


def main():
    warnings.formatwarning = formatwarning  # noqa

    parser = ArgumentParser(prog='nbdig', description='(zab)dig for netbox')
    parser.add_argument(
        '-c', '--config', metavar='INI',
        help=f'configuration INI location (default: {INI_DEFAULT})')
    parser.add_argument(
        '-p', '--property', action='append', metavar='PROPERTY',
        help=('extra properties to search/list for forward lookup; '
              'e.g. status, or status=offline to filter directly; or '
              'a custom field cf_machine_id=^2 that starts with a 2'))
    parser.add_argument('-x', metavar='IP', help='reverse lookup')
    parser.add_argument('-v', '--verbose', action='store_true', help='verbose')
    parser.add_argument('hostfragment', nargs='?')

    args = parser.parse_args()
    if args.x is not None and args.hostfragment is not None:
        parser.error("supply either 'hostfragment' or -x 'IP', not both")
    elif args.x is args.hostfragment is None:
        parser.error("requires at least one argument")

    try:
        if args.config is None:
            config = Config.from_defaults()
        else:
            config = Config.from_ini(args.config)
    except StartupError as e:
        parser.error(str(e))

    nb = ThinNetboxWrapper(config)
    if args.hostfragment is not None:
        do_forward_lookup(
            nb, args.hostfragment, args.property, args.verbose)
    elif args.x is not None:
        if args.property:
            raise NotImplementedError('-x with -p not implemented')
        do_reverse_lookup(nb, args.x, args.verbose)
    else:
        raise NotImplementedError('cannot get here')


if __name__ == '__main__':
    main()
